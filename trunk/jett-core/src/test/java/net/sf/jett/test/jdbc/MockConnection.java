package net.sf.jett.test.jdbc;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Savepoint;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.concurrent.Executor;
import java.util.HashMap;
import java.util.Map;

/**
 * A <code>MockConnection</code> is a minimally implemented
 * <code>Connection</code> just to provide JDBC-like functionality without
 * a database.
 *
 * @author Randy Gettman
 * @since 0.6.0
 */
public class MockConnection implements Connection
{
   // "abort" is part of the Connection interface as of JDK 1.7.
   public void abort(Executor executor) {}
   public Statement createStatement() throws SQLException
   {
      return new MockStatement(this);
   }
   public PreparedStatement prepareStatement(String sql) throws SQLException
   {
      return new MockPreparedStatement(this);
   }
   public CallableStatement prepareCall(String sql) throws SQLException
   {
      // This may be replaced with a "MockCallableStatement" when implementing
      // that functionality.
      return null;
   }
   public String nativeSQL(String sql) throws SQLException { return sql; }
   public void setAutoCommit(boolean autoCommit) throws SQLException {}
   public boolean getAutoCommit() throws SQLException { return false; }
   public void commit() throws SQLException {}
   public void rollback() throws SQLException {}
   public void close() throws SQLException {}
   public boolean isClosed() throws SQLException { return false; }
   public DatabaseMetaData getMetaData() throws SQLException { return null; }
   public void setReadOnly(boolean readOnly) throws SQLException {}
   public boolean isReadOnly() throws SQLException { return false; }
   public void setCatalog(String catalog) throws SQLException {}
   public String getCatalog() throws SQLException { return "catalog"; }
   public void setTransactionIsolation(int level) throws SQLException {}
   public int getTransactionIsolation() throws SQLException { return Connection.TRANSACTION_READ_COMMITTED; }
   public SQLWarning getWarnings() throws SQLException { return null;}
   public void clearWarnings() throws SQLException {}
   public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException
   {
      return createStatement();
   }
   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
   {
      return prepareStatement(sql);
   }
   public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
   {
      return prepareCall(sql);
   }
   public Map<String, Class<?>> getTypeMap() throws SQLException { return new HashMap<String, Class<?>>(); }
   public void setTypeMap(Map<String, Class<?>> map) throws SQLException {}
   public void setHoldability(int holdability) throws SQLException {}
   public int getHoldability() throws SQLException { return ResultSet.HOLD_CURSORS_OVER_COMMIT; }
   public Savepoint setSavepoint() throws SQLException { return null; }
   public Savepoint setSavepoint(String name) throws SQLException { return null; }
   public void rollback(Savepoint savepoint) throws SQLException {}
   public void releaseSavepoint(Savepoint savepoint) throws SQLException {}
   public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
   {
      return createStatement();
   }
   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
   {
      return prepareStatement(sql);
   }
   public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException
   {
      return prepareCall(sql);
   }
   public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException
   {
      return prepareStatement(sql);
   }
   public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException
   {
      return prepareStatement(sql);
   }
   public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException
   {
      return prepareStatement(sql);
   }
}
