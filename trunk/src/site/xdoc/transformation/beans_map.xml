<document>
    <properties>
        <author email="rgettman@users.sourceforge.net">Randy Gettman</author>
        <title>Beans Map</title>
    </properties>
    <body>
        <section name="Supplying Beans">
            <p>The developer supplies a map of bean names to bean values that are used in the
            transformation process.  This map is used as a source of values for evaluating JEXL
            expressions that are contained in the template spreadsheet.  JETT uses the name
            reference from a JEXL Expression as the bean name and looks up the bean value using the
            bean name as the key.  Please see
            <a href="../expressions/jexl_expressions.html">JEXL Expressions</a> for more 
            information on how JETT uses the beans map when processing Expressions.</p>
            <source>
Map&lt;String, Object&gt; beans = new HashMap&lt;String,  Object&gt;();
beans.put("beanName", bean);
beans.put("anotherBean", anotherBean);
            </source>
        </section>
        <section name="Transformation">
            <p>After bean creation, the developer supplies beans to an
            <code><a href="../apidocs/net/sf/jett/transform/ExcelTransformer.html">ExcelTransformer</a></code>
            which controls the transformation of the template spreadsheet into the resulting
            spreadsheet.  All bean values are available to all sheets found in the template
            spreadsheet.</p>
            <source>
FileOutputStream fileOut;
try
{
   fileOut = new FileOutputStream(outPath);
}
catch (IOException e)
{
   System.err.println("IOException opening " + outPath + ": " + e.getMessage();
}
InputStream fileIn = null;
try
{
   fileIn = new BufferedInputStream(new FileInputStream(inPath));
   ExcelTransformer transformer = new ExcelTransformer();
   Workbook workbook = transformer.transform(fileIn, beans);
   workbook.write(fileOut);
   fileOut.close();
}
catch (IOException e)
{
   System.err.println("IOException reading " + inPath + ": " + e.getMessage());
}
catch (InvalidFormatException e)
{
   System.err.println("InvalidFormatException reading " + inPath + ": " + e.getMessage();
}
            </source>
            <p>Alternatively, JETT can handle the reading and writing of Excel files, if it is
            supplied with the input (template) and output (resultant) filenames.</p>
            <source>
try
{
   ExcelTransformer transformer = new ExcelTransformer();
   transformer.transform(inPath, outPath, beans);
}
catch (IOException e)
{
   System.err.println("IOException reading " + inPath + ": " + e.getMessage());
}
catch (InvalidFormatException e)
{
   System.err.println("InvalidFormatException reading " + inPath + ": " + e.getMessage();
}
            </source>
        </section>
    </body>
</document>