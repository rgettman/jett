<document>
    <properties>
        <author email="rgettman@users.sourceforge.net">Randy Gettman</author>
        <title>Welcome to JETT</title>
    </properties>
    <body>
        <section name="News">
            <p><strong>JETT 0.8.0 (Beta) Released</strong></p>
            <p>New in JETT 0.8.0:</p>
            <ul>
                <li>Ticket #21: Add more listener hooks to JETT execution.  JETT already had
                    listeners for after cells were processed, after tags were processed, and after
                    a loop iteration of a looping tag was processed.  Now, <code>CellListener</code>,
                    <code>TagListener</code>, and <code>TagLoopListener</code> each have new
                    "before" methods that will execute.  Additionally, there is the new
                    <code>SheetListener</code> interface, with both "before" and "after" methods,
                    that triggers before and after a <code>Sheet</code> is transformed.  Each
                    "before" method returns a <code>boolean</code> that controls whether the
                    relevant processing should continue.</li>
                <li>Ticket #22: Performance issues were reported after JETT 0.7.0 changed
                    <code>AttributeUtil</code> into <code>AttributeEvaluator</code> so that it
                    could carry the state necessary to report on which cell errors were found.
                    It has been changed back to <code>AttributeUtil</code>, with each static
                    utility method taking a <code>TagContext</code> as a parameter to supply the
                    necessary cell information.</li>
                <li>Ticket #23: There was a <code>FormulaParser</code> error when a JETT formula
                    contained a ranged cell reference such as "A10:A11".  The <code>FormulaParser</code>
                    now recognizes the ":" character, so that each cell reference can be resolved
                    correctly.</li>
                <li>Ticket #25: JDBC Execution in a "forEach" tag with a "groupBy" attribute
                    results in an <code>UnsupportedOperationException</code>.  JDBC Execution in
                    JETT relies on a <code>get(String)</code> method existing and being invoked in
                    an expression context.  However, JETT utilizes
                    <a href="http://jagg.sourceforge.net">jAgg</a> for the processing of the
                    "groupBy" attribute, which didn't recognize or search for <code>get(String)</code>
                    methods in a bean if the normal <code>getProperty()</code> method wasn't found.
                    JETT is now upgraded to use jAgg 0.8.1, which supplies this missing
                    functionality.</li>
                <li>Ticket #26: Allow expressions to be escaped so that they aren't evaluated.
                    JETT now allows the "$" character to be escaped, such that <code>\${expression}</code>
                    won't be evaluated.  An unrelated bug was found and fixed when implementing the
                    changes for this ticket.  If rich text formatting was applied to a cell that
                    contained identical expressions, then the formatting was messed up due to the
                    fact that all of the expressions were replaced at once, but the formatting was
                    applied only once.  Now, all expressions are replaced individually, resulting
                    in rich text formatting being applied correctly.</li>
                <li>Ticket #29: JETT has slow performance when transforming sheets with lots of
                    merged regions.  When there are a large number of merged regions in a sheet,
                    JETT, which relies on Apache POI for its access to the sheet's merged regions,
                    suffered large performance penalties.  This occurred when attempting to process
                    large numbers of merged regions on .xlsx workbooks.  As a workaround, JETT now
                    caches the merged regions present on the template sheet.  It manipulates those
                    merged regions only in its own cache, and it applies them back to the sheet
                    after it has been transformed.  This results in a big performance boost.</li>
                <li>Ticket #31: Add option to recalculate all formulas.  JETT now has the options
                    to evaluate all formulas once transformation is done, with a new method in
                    <code>ExcelTransformer</code>: <code>setEvaluateFormulas</code>.  It also can
                    control a flag in the workbook itself to force recalculation of formulas when
                    Excel opens the workbook, with another new method in
                    <code>ExcelTransformer</code>: <code>setForceRecalculationOnOpening</code>.</li>
                <li>Bug fix (Ticket #32): <a href="collections/implicit.html">Implicit Collections
                    Processing</a> breaks when a numeric cell is in the block of cells to be
                    processed.  JETT had assumed that the cells in the block all had text, so
                    Apache POI threw an exception when a numeric cell was found.  This occurs when
                    JETT is searching for collection expressions to be processed in "implicit
                    collections processing".  Now, JETT ignores numeric cells for this purpose.
                    Also, the calculation of the leftmost and rightmost extent of the block was
                    wrong when exactly one of the metadata keys "right" and "left" was specified.
                    This has been fixed also.</li>
                <li>Ticket #33: Update JETT formulas when the sheet name changes, either due to
                    sheet cloning, sheet repositioning, or evaluating an expression located in the
                    sheet name.  JETT didn't update JETT formula cell references on any of these
                    events, resulting in possible incorrect cell references or JETT simply not
                    replacing JETT formulas with an Excel formula at all.  Now, JETT updates JETT
                    formula cell references on all these events.</li>
                <li>Ticket #34: Support the manipulation of existing named ranges.  Before now,
                    JETT completely ignored named ranges.  Now, if sheets are cloned, repositioned,
                    or renamed, any named ranges that were scoped to those sheets are re-scoped.
                    Also, the new <a href="tags/name.html">Name tag</a> in the standard library
                    lets the user supply a JETT formula to an existing named range, so that the
                    formula referred to by a named range can be changed dynamically during
                    transformation.  This allows a chart that refers to named ranges for its data
                    ranges to have its data changed dynamically, even if it's indirectly, by
                    updating the existing named ranges.</li>
            </ul>
            <p>View a history of all changes at the <a href="changelog.html">Change Log</a>.</p>
        </section>
        <section name="Overview">
            <p>JETT (Java Excel Template Translator) is a Java 5.0 API that allows speedy creation
            of Excel spreadsheet reports using Excel spreadsheet templates.</p>
            <p>JETT is built on top of the <a href="http://poi.apache.org/">Apache POI</a> library,
            which gives almost total control to the developer over the reading, creation, and
            modification of Excel spreadsheets.  This includes the very tedious, verbose, and
            error-prone process of coding cell and text formatting, including font, color,
            highlighting, borders, alignment, header/footer, etc.</p>
            <p>JETT is also built on top of the <a href="http://commons.apache.org/jexl/">Apache
            Commons JEXL library</a> (Java Expression Language), which allows expressions to be
            evaluated easily.</p>
            <p>Additionally, JETT uses the <a href="http://jagg.sourceforge.net">jAgg</a> library
            (Java Aggregations) to perform aggregate operations, such as Sum and Average, and
            super-aggregation operations, such as rollups and cubes, and display the calculations
            in the spreadsheet.</p>
            <p>JETT allows the developer to follow the MVC pattern easily.  JETT is the Controller,
            the developer creates the Model, and either the developer or another party controls the
            Excel spreadsheet template, which acts as the View.</p>
            <p>To summarize JETT, the developer supplies an Excel spreadsheet <em>template</em>,
            which provides the structure, layout, and styling of the resultant spreadsheet.  Then,
            the developer creates <em>beans</em> that contain the actual data to be populated in
            the spreadsheet.  Finally, the developer uses an
            <a href="apidocs/net/sf/jett/transform/ExcelTransformer.html"><code>ExcelTransformer</code></a>,
            the JETT API entry point, to transform the template spreadsheet into the resultant
            spreadsheet, complete with the desired data, which can then be published.</p>
        </section>
        <section name="Main Features">
            <ul>
                <li>Integration with <a href="http://commons.apache.org/jexl/">Apache Commons JEXL
                    </a> 2.1.1 (Java Expression Language).  This allows for easy creation of
                    expressions that are substituted with model data in the form of beans at
                    runtime.</li>
                <li>Integration with <a href="http://poi.apache.org/">Apache POI</a> 3.10.  JETT is
                    built on top of the extensive Apache POI library with which it controls sheet
                    transformations.</li>
                <li>Integration with the SourceForge project
                    <a href="http://jagg.sourceforge.net">jAgg</a> 0.8.1.  JETT uses this library
                    to evaluate Aggregate Expressions, a JETT-based extension to JEXL that allows
                    aggregate expressions to be evaluated, such as Sum, Count, Avg, etc.</li>
                <li>Built-in Tag library that allows XML-like tags to be placed in template
                    spreadsheets, allowing such simple programming-like constructs as “if”, “for”,
                    “forEach”, and more.</li>
                <li>Looping tags support “copy down” and “copy right” behavior for the display of
                    Collections.</li>
                <li>Custom Tag Libraries may be coded and supplied to JETT for execution.</li>
                <li>Like Apache POI, JETT attempts as much as possible to keep existing Excel
                    features intact, including Charts, Macros, etc.</li>
                <li>The CellListener interface allows dynamic, custom processing of Cells, such as
                    alternate row highlighting, value manipulation, etc.</li>
                <li>Merged cell regions are shifted and copied as appropriate.</li>
                <li>Row heights and columns widths are respected as best as possible.</li>
                <li>Template sheets may be dynamically cloned and separately evaluated in the
                    resultant spreadsheet.</li>
                <li>Multiple collections may be implicitly processed using a single loop.</li>
                <li>It is possible to implement and display adjacent, or side-by-side, lists.</li>
                <li>Supports binary Excel (.xls) and XML Excel (.xlsx) documents.</li>
                <li>RichTextStrings are supported, even within Expressions.</li>
                <li>JETT gives access to POI Objects in JEXL Expressions, which in turn allows
                    access to Workbook and Sheet properties, including the Header &amp; Footer, and
                    PageSetup objects.</li>
                <li>Excel Formula generation support.</li>
                <li>JDBC Query Execution inside the template.</li>
            </ul>
        </section>
        <section name="Requirements">
            <p>JETT requires the following libraries:</p>
            <ul>
                <li>Apache POI 3.10</li>
                <ul>
                    <li>poi-3.10-FINAL-20140208.jar</li>
                    <li>poi-ooxml-3.10-FINAL-20140208.jar</li>
                    <li>poi-ooxml-schemas-3.10-FINAL-20140208.jar</li>
                    <li>Apache POI, in turn, depends on the following libraries: XML Beans 2.3.0,
                        Dom4j 1.6.1, and StAX 1.0.1.</li>
                </ul>
                <li>XML Beans 2.3.0</li>
                <ul>
                    <li>xmlbeans-2.3.0.jar</li>
                </ul>
                <li>Dom4j 1.6.1</li>
                <ul>
                    <li>dom4j-1.6.1.jar</li>
                </ul>
                <li>StAX 1.0.1</li>
                <ul>
                    <li>stax-api-1.0.1.jar</li>
                </ul>
                <li>Apache Commons JEXL 2.1.1</li>
                <ul>
                    <li>commons-jexl-2.1.1.jar</li>
                    <li>Apache Commons JEXL 2.1.1 in turn depends on Commons Logging 1.1.1.</li>
                </ul>
                <li>Apache Commons Logging 1.1.1</li>
                <ul>
                    <li>commons-logging-1.1.1.jar</li>
                </ul>
                <li>SourceForge's jAgg 0.8.1</li>
                <ul>
                    <li>jagg-core-0.8.1.jar</li>
                </ul>
                <li>JUnit 4.8.2 (for testing only)</li>
                <ul>
                    <li>junit-4.8.2.jar</li>
                </ul>
                <li>HSQLDB 1.8.0.10 (for testing only)</li>
                <ul>
                    <li>hsqldb-1.8.0.10.jar</li>
                </ul>
            </ul>
        </section>
    </body>
</document>