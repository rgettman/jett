<document>
    <properties>
        <author email="rgettman@users.sourceforge.net">Randy Gettman</author>
        <title>Comparison to jXLS</title>
    </properties>
    <body>
        <section name="Comparison of JETT to jXLS">
        <p>JETT is similar to jXLS, because JETT performs the same function -- translating Excel
        template spreadsheets into spreadsheets with the desired data populated.  Here, JETT
        0.9.0 is compared with the latest version of jXLS, 1.0.6:</p>
        <table style="width: 750px;">
            <tr>
                <th style="width: 200px">Feature</th>
                <th style="width: 275px">JXLS</th>
                <th style="width: 275px">JETT</th>
            </tr>
            <tr>
                <td>Excel File Formats Supported</td>
                <td>97-2003 (.xls), 2007+ (.xlsx)</td>
                <td>97-2003 (.xls), 2007+ (.xlsx)</td>
            </tr>
            <tr>
                <td>Excel Spreadsheet API Used</td>
                <td><a href="http://poi.apache.org/">Apache POI</a></td>
                <td><a href="http://poi.apache.org/">Apache POI</a></td>
            </tr>
            <tr>
                <td>Expressions Support</td>
                <td><a href="http://commons.apache.org/jexl/">Apache Commons JEXL</a></td>
                <td><a href="http://commons.apache.org/jexl/">Apache Commons JEXL</a></td>
            </tr>
            <tr>
                <td>Tagless Export of Collections -- Implicit Collections Processing</td>
                <td>
                    <p>Supported; can be disabled, but only overall, not on a per-collection name
                    basis.  It can be controlled in the following ways, with metadata, e.g.
                    <code>${collName.property}//:2</code>, <code>Label://collName</code>.</p>
                    <p>Include a "//collName" suffix to include cells in the repeating block that
                    should be included, even though they don't explicitly reference the collection
                    name in an Expression.</p>
                    <p>Include a "//:n" suffix to indicate how many rows should be included in each
                    repeating block.</p>
                </td>
                <td>
                    <p>Supported; can be disabled on a per-collection name basis.  It can be
                    controlled in the following ways:</p>
                    <p>Include a "?@" metadata suffix, plus key/value pairs, e.g.
                    <code>${collName.property}?@extraRows=1;left=1;right=2</code>.</p>
                    <ul>
                        <li><code>left=n</code> and/or <code>right=n</code> Include other columns
                        to the left and/or the right in the repeating block.</li>
                        <li><code>extraRows=n</code> Include extra rows in each repeating block.</li>
                        <li><code>pastEndAction=action</code> State what action is to be taken when
                        processing Collections with less data than other Collections.</li>
                        <li><code>replaceValue=value</code> When the pastEndAction is "replaceExpr",
                        specify a replacement value for affected expressions.</li>
                        <li><code>groupDir=dir</code> Create an Excel Group (Outline) with rows or
                        columns on the processed data.</li>
                        <li><code>collapse=true/false</code> When creating an Excel Group
                        (Outline), decide whether to collapse the group.</li>
                        <li><code>copyRight=true/false</code> Copy blocks to the right, instead of
                        downward, the default.</li>
                        <li><code>fixed=true/false</code> Mark this as "fixed", meaning that the
                        processing assumes that there is space in which to place copied blocks of
                        data, so it won't attempt to shift content out of the way.</li>
                        <li><code>indexVar=varName</code> Place a zero-based index looping variable
                        with this name in the beans map for further reference.</li>
                        <li><code>limit=n</code> Limit the number of items displayed for any and all
                        affected collections.</li>
                        <li><code>onProcessed=var</code> Specify a <code>TagListener</code> that
                        will be called when processing is complete.</li>
                        <li><code>onLoopProcessed=var</code> Specify a <code>TagLoopListener</code>
                        that will be called when the processing of each loop iteration is complete.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Formulas</td>
                <td><p>Supported, format <code>$[formula(cellref)]</code>.  Optionally, provide a
                default value in case the cell references get deleted:
                <code>$[formula(cellref)@defValue]</code>.</p></td>
                <td><p>Supported, format <code>$[formula(cellref)]</code>.  Optionally, provide a
                default value in case the cell references get deleted:
                <code>$[formula(cellref||defValue)]</code>.</p>
                <p>Additionally, create dynamic formulas with the formula tag.</p></td>
            </tr>
            <tr>
                <td>Aggregate Expressions</td>
                <td>Limited support, e.g. <code>${Func(field):collection}</code>, where "Func" is
                one of "sum", "min", "max", "avg", and "count".</td>
                <td>Supported, with <a href="http://jagg.sourceforge.net">jAgg</a> integration,
                using Aggregate Expressions, e.g. <code>${jagg:eval(list, 'Func(field)')}</code> --
                and the agg tag.  "Func" can be any one of 20 Aggregators built-in to the jAgg
                library, including "Sum", "Min", "Max", "Avg", "Count", and many more, or a custom
                Aggregator.</td>
            </tr>
            <tr>
                <td>Merged Regions</td>
                <td>Takes into account merged regions when shifting and copying cells.</td>
                <td>Takes into account merged regions when shifting and copying cells.</td>
            </tr>
            <tr>
                <td>Preserve Excel Features</td>
                <td>Preserves Excel macros, charts, drawings, images.</td>
                <td>Preserves Excel macros, charts, drawings, images, rich text strings.</td>
            </tr>
            <tr>
                <td>Extracting Data From an Excel Spreadsheet</td>
                <td>jXLS contains the jxls-reader module</td>
                <td>Not supported</td>
            </tr>
            <tr>
                <th colspan="3">Transformer</th>
            </tr>
            <tr>
                <td>Transformer Class (API Entry Point)</td>
                <td>XLSTransformer transformer = new XLSTransformer();</td>
                <td>ExcelTransformer transformer = new ExcelTransformer();</td>
            </tr>
            <tr>
                <td>Transform (Basic)</td>
                <td><ul>
                    <li>transformer.<br/>transformXLS(String srcFilePath, Map beanParams, String destFilePath);</li>
                    <li>transformer.<br/>transformXLS(InputStream is, Map beanParams);</li></ul></td>
                <td><ul>
                    <li>transformer.<br/>transform(InputStream is, Map&lt;String, Object&gt; beans);</li>
                    <li>transformer.transform(String inFilename, String outFilename, Map&lt;String, Object&gt; beans)</li>
                    <li>transformer.transform(Workbook workbook, Map&lt;String, Object&gt; beans);</li></ul></td>
            </tr>
            <tr>
                <td>Transform One Template Sheet Into Many Result Sheets</td>
                <td><ul>
                    <li>transformer.<br/>transformMultipleSheetsList(
                <br/>InputStream is, List objects, List newSheetNames,
                String beanName, Map beanParams, int startSheetNum);</li></ul></td>
                <td><ul>
                    <li>transformer.<br/>transform(InputStream is, List&lt;String&gt; templateSheetNamesList,
                List&lt;String&gt; newSheetNamesList, List&lt;Map&lt;String, Object&gt;&gt; beansList);</li>
                    <li>transformer.<br/>transform(String inFilename, String outFilename, List&lt;String&gt; templateSheetNamesList,
                List&lt;String&gt; newSheetNamesList, List&lt;Map&lt;String, Object&gt;&gt; beansList)</li>
                    <li>transformer.<br/>transform(Workbook workbook, List&lt;String&gt; templateSheetNamesList,
                List&lt;String&gt; newSheetNamesList, List&lt;Map&lt;String, Object&gt;&gt; beansList);</li></ul></td>
            </tr>
            <tr>
                <td>Fixed Collection Names</td>
                <td>transformer.<br/>markAsFixedSizeCollection<br/>("employees");</td>
                <td>transformer.<br/>addFixedSizeCollectionName<br/>("employees");</td>
            </tr>
            <tr>
                <td>Turn Off Implicit Collections Processing</td>
                <td>transformer.<br/>setJexlInnerCollectionsAccess<br/>(true);</td>
                <td>transformer.<br/>turnOffImplicitCollectionProcessing<br/>("employees");</td>
            </tr>
            <tr>
                <td>Evaluate all formulas after transformation</td>
                <td>Not supported</td>
                <td>transformer.setEvaluateFormulas(true);<br/></td>
            </tr>
            <tr>
                <td>Force formula recalculation upon opening</td>
                <td>Not supported</td>
                <td>transformer.setForceRecalculationOnOpening(boolean);</td>
            </tr>
            <tr>
                <th colspan="3">Tags</th>
            </tr>
            <tr>
                <td>Tag Bodies</td>
                <td>
                    <p>All tags that have their end tag below their start tag must have both tags
                    exist alone on their respective rows.  The entire rows are removed prior to
                    processing, and any content below the tags is shifted up.</p>
                    <p>All tags that have their end tag to the right of their start tag must have
                    both tags exist on the same row.  The cells containing the tags are removed
                    prior to processing, and any content to the right is shifted left.  This can
                    interfere with an attempt to preserve things like column widths.</p>
                    <p>To display multiple rows of Collection output, repeating to the right, one
                    must use one tag per row.</p>
                </td>
                <td>
                    <p>All tags can coexist in the same cell as other content, eliminating the need
                    to  shift other content because of the removal of tag content.</p>
                    <p>Many tags can explicitly set directionality, so that it is not dependent on
                    where the end tag is, relative to the start tag.</p>
                    <p>To display multiple rows of Collection output, repeating to the right, one
                    can use one tag and explicitly state that the additional blocks should be
                    copied right.</p>
                </td>
            </tr>
            <tr>
                <td>Looping Tag to Display a Collection</td>
                <td>
                    <p>jx:forEach tag</p>
                    <ul>
                        <li><code>items</code> attribute - The Collection of items to display.</li>
                        <li><code>var</code> attribute - The looping variable introduced into the
                        beans  map.</li>
                        <li><code>groupBy</code> attribute - Display groups of items, based on one
                        property.</li>
                        <li><code>groupOrder</code> attribute - Sort groups of items, ascending or
                        descending.</li>
                        <li><code>select</code> attribute - Filter the display list.</li>
                        <li><code>varStatus</code> attribute - Index of item currently being
                        iterated.</li>
                        <li>No <code>limit</code> attribute.</li>
                        <li>No <code>fixed</code> atttribute, but one can use the "fixed size
                        collection" feature.</li>
                        <li>No <code>pastEndAction</code> attribute.</li>
                        <li>No <code>groupDir</code> or <code>collapse</code> attributes.</li>
                    </ul>
                </td>
                <td>
                    <p>jt:forEach tag</p>
                    <ul>
                        <li><code>items</code> attribute - The Collection of items to display.</li>
                        <li><code>var</code> attribute - The looping variable introduced into the
                        beans map.</li>
                        <li><code>groupBy</code> attribute - Display groups of items, based on one
                        or more properties.</li>
                        <li><code>orderBy</code> attribute - Order the entire collection, grouped
                        or not, specifying multiple sort fields.</li>
                        <li><code>where</code> attribute - Filter the display list.</li>
                        <li><code>indexVar</code> attribute - Index of item currently being
                        iterated.</li>
                        <li><code>limit</code> attribute - Stop display after a certain number of
                        items.</li>
                        <li><code>fixed</code> attribute - Don't shift other content out of the
                        way; assume that the spreadsheet has "room" for the collection content.</li>
                        <li><code>pastEndAction</code> attribute - Controls what happens when the
                        iterations proceeds beyond the end of a Collection.</li>
                        <li><code>replaceValue</code> attribute - Controls the replacement value
                        if <code>pastEndAction</code> is "replaceExpr".</li>
                        <li><code>groupDir</code> attribute - After processing, create an Excel
                        Group (Outline) around all of the processed data, in rows or columns.</li>
                        <li><code>collapse</code> attribute - If creating an Excel Group (Outline),
                        decide whether to collapse the group.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Looping Tag to Display Multiple Collections At Once</td>
                <td>No such tag exists, but it is possible with implicit collections processing.</td>
                <td>jt:multiForEach tag or implicit collections processing.</td>
            </tr>
            <tr>
                <td>Loop Over Arbitrary Numbers</td>
                <td>Not supported directly.  To workaround, supply a Collection of numbers to the
                beans map and use a jx:forEach tag.</td>
                <td>jt:for tag</td>
            </tr>
            <tr>
                <td>Display Content Conditionally</td>
                <td>
                    <p>jx:if tag - Must have a body.</p>
                    <ul>
                        <li><code>test</code> attribute - The condition to display the content.</li>
                    </ul>
                </td>
                <td>
                    <p>jt:if tag</p>
                    <ul>
                        <li><code>test</code> attribute - The condition to display the content.</li>
                        <li><code>elseAction</code> attribute - What to do when the condition is
                        false to remove the content.</li>
                        <li>(bodiless form only) <code>then</code> attribute - The content to
                        display if the condition is true.</li>
                        <li>(bodiless form only) <code>else</code> attribute - The content to
                        display if the condition is false.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Grouping Excel Rows</td>
                <td>
                    <p>jx:outline tag, grouping rows only</p>
                    <ul>
                        <li><code>detail</code> attribute - Whether to show the newly created Excel
                        Group (Outline) as uncollapsed.</li>
                    </ul>
                </td>
                <td>
                    <p>jt:group tag, grouping rows or columns</p>
                    <ul>
                        <li><code>groupDir</code> attribute - Whether to create the Excel Group
                        (Outline) in rows or columns.</li>
                        <li><code>collapse</code> attribute - Whether to show the newly created
                        Excel Group (Outline) as collapsed.</li>
                    </ul>
                    <p>It is also possible to create an Excel Group (Outline) around a dynamically
                    determined range of rows or columns with looping tags such as "forEach".</p>
                </td>
            </tr>
            <tr>
                <td>Excel Comment Creation</td>
                <td>Not supported</td>
                <td>
                    <p>jt:comment tag</p>
                    <ul>
                        <li><code>value</code> attribute - The normal content of the Cell in which
                        to create a Comment.</li>
                        <li><code>author</code> attribute - Specify the author of the comment.</li>
                        <li><code>comment</code> attribute - Specify the content of the comment.</li>
                        <li><code>visible</code> attribute - Control whether the comment is
                        initially visible.</li>
                    </ul>
                    <p>Because JETT is built on Apache POI, creating Comments on a Sheet will most
                    likely corrupt any pre-existing Charts or other Drawings, but only for .xls
                    spreadsheets (97-2003 versions).</p>
                </td>
            </tr>
            <tr>
                <td>Hyperlink Creation</td>
                <td>Not supported</td>
                <td>
                    <p>jt:hyperlink tag</p>
                    <ul>
                        <li><code>type</code> attribute - Control the type of the hyperlink:
                        <em>url</em>, <em>email</em>, <em>file</em>, or <em>doc</em>.</li>
                        <li><code>address</code> attribute - The address of the hyperlink.</li>
                        <li><code>value</code> attribute - The contents of the Cell with the
                        hyperlink, acting as the label for the hyperlink.</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Dynamic Formula Creation</td>
                <td>Not supported</td>
                <td>
                    <p>jt:formula tag</p>
                </td>
            </tr>
            <tr>
                <td>Dynamic Named Range Manipulation</td>
                <td>Not supported</td>
                <td>
                    <p>jt:name tag</p>
                </td>
            </tr>
            <tr>
                <td>Dynamic Style</td>
                <td>Not supported</td>
                <td>
                    <p>jt:style tag, where the "style" attribute controls:</p>
                    <ul>
                        <li>horizontal and vertical alignment</li>
                        <li>borders and border colors</li>
                        <li>data format string</li>
                        <li>fill background and foreground colors, and fill pattern</li>
                        <li>"hidden" and "locked"</li>
                        <li>number of characters text is indented</li>
                        <li>number of degrees text is rotated</li>
                        <li>whether text is wrapped to the next line within a cell</li>
                        <li>font:</li>
                        <ul>
                            <li>bold</li>
                            <li>charset</li>
                            <li>color</li>
                            <li>size</li>
                            <li>font name</li>
                            <li>italic</li>
                            <li>strikeout</li>
                            <li>subscript/superscript</li>
                            <li>underline</li>
                        </ul>
                    </ul>
                    <p>... by specifying style properties directly, or by specifying a class name
                    that is defined in a CSS-like file with the "class" attribute.</p>
                </td>
            </tr>
            <tr>
                <td>Expression Output</td>
                <td>jx:out tag or ${expression}</td>
                <td>${expression} only</td>
            </tr>
            <tr>
                <td>Perform SQL-like "group by" Operations on Data</td>
                <td>Not supported</td>
                <td>jt:agg tag, which also supports super-aggregate operations such as rollups and
                cube</td>
            </tr>
            <tr>
                <td>Tag Support for Aggregate Expressions</td>
                <td>Not supported</td>
                <td>jt:total tag</td>
            </tr>
            <tr>
                <td>Perform Analytic Operations on Data</td>
                <td>Not supported</td>
                <td>jt:ana tag</td>
            </tr>
            <tr>
                <td>Don't Transform an Expression</td>
                <td>Not supported</td>
                <td>jt:null tag, and also <code>\${expression}</code></td>
            </tr>
            <tr>
                <th colspan="3">Other</th>
            </tr>
            <tr>
                <td>SQL Execution in the Template</td>
                <td>Supported, with the ReportManager bean.</td>
                <td>Supported, with the JDBCExecutor bean.  Also supported are "?" placeholders in
                the query, plus additional arguments passed as bind variable values.</td>
            </tr>
            <tr>
                <td>Access to POI Objects in the Template</td>
                <td>workbook, sheet, hssfRow</td>
                <td>workbook, sheet, cell</td>
            </tr>
            <tr>
                <td>Execution Hooks for Custom Processing</td>
                <td>CellProcessor, PropertyPreprocessor, RowProcessor</td>
                <td>CellListener, TagListener, TagLoopListener, SheetListener</td>
            </tr>
            <tr>
                <td>Fixed Size Collections</td>
                <td>Supported on a collection name basis</td>
                <td>Supported on a collection name basis, plus the "fixed" attribute for
                looping tags, plus implicit collections processing.</td>
            </tr>
            <tr>
                <td>Custom Tag Libraries</td>
                <td>Not documented, but it is possible by supplying a subclass of Configuration to
                the XLSTransformer.  This subclass registers a custom TagLib.</td>
                <td>Supported, through the direct registration of a custom TagLibrary in the
                ExcelTransformer.</td>
            </tr>
            <tr>
                <td>Expose JEXL Engine Properties</td>
                <td>Not supported.</td>
                <td>Silent and Lenient flags are exposed.  Controlling the size of the JEXL Engine
                parse cache is exposed.  Adding JEXL custom namespace functions is exposed.</td>
            </tr>
        </table>
        </section>
        <section name="Guide to Converting Templates from jXLS to JETT">
            <p>While there are some features of JETT that do not exist in jXLS, and some features
            of jXLS that do not exist in JETT, there are lots of features that are common, but
            sometimes the syntax varies.  Here is a guide comparing those commonly used features:</p>
            <h1>Collections Display</h1>
            <p>Here is an example of jXLS's "forEach" tag.  Notice how separate rows are needed for
            the "jx:forEach" tag, and separate cells are needed for the "jx:if" tag.  Each cell is
            less cluttered, but jXLS needs to perform extra shifting when removing the tags.</p>
            <table style="width: 850px;">
                <tr>
                    <td class="bold" style="width: 250px;">Employee</td>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td class="bold" style="width: 250px;">Manager</td>
                    <td class="bold" style="width: 100px;">&nbsp;</td>
                    <td class="bold" style="width: 100px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 250px;">&lt;jx:forEach items="${employees}" var="employee" select="${employee.salary &gt;= 900}" varStatus="status"&gt;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 250px;">&nbsp;</td>
                    <td style="width: 100px;">&nbsp;</td>
                    <td style="width: 100px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 250px;">${status.index + 1}. ${employee.lastName}, ${employee.firstName}</td>
                    <td style="width: 150px;">${employee.salary}</td>
                    <td style="width: 250px;">&lt;jx:if test="${employee.getManager() != null}"&gt;</td>
                    <td style="width: 100px;">${employee.manager.lastName}, ${employee.manager.firstName}</td>
                    <td style="width: 100px;">&lt;/jx:if&gt;</td>
                </tr>
                <tr>
                    <td style="width: 250px;">&lt;/jx:forEach&gt;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 250px;">&nbsp;</td>
                    <td style="width: 100px;">&nbsp;</td>
                    <td style="width: 100px;">&nbsp;</td>
                </tr>
            </table>
            <p>Here is the equivalent JETT "forEach" tag.  The cells with tags are more cluttered,
            but no shifting to remove tags is needed.</p>
            <table style="width: 750px;">
                <tr>
                    <td class="bold" style="width: 250px;">Employee</td>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td class="bold" style="width: 350px;">Manager</td>
                </tr>
                <tr>
                    <td style="width: 250px;">&lt;jt:forEach items="${employees}" var="employee" where="${employee.salary &gt;= 900}" indexVar="index"&gt;${index + 1}. ${employee.lastName}, ${employee.firstName}</td>
                    <td style="width: 150px;">${employee.salary}</td>
                    <td style="width: 350px;">&lt;jt:if test="${employee.getManager() != null}" then="${employee.manager.lastName}, ${employee.manager.firstName}"/&gt;&lt;/jt:forEach&gt;</td>
                </tr>
            </table>
            <p>Both templates would, in their respective frameworks, yield the following
            transformation.  Notice how Elmer Fudd, salary $800, is not present.</p>
            <table style="width: 750px;">
                <tr>
                    <td class="bold" style="width: 250px;">Employee</td>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td class="bold" style="width: 350px;">Manager</td>
                </tr>
                <tr>
                    <td style="width: 250px;">1. Stack, Robert</td>
                    <td style="width: 150px;">$1000.00</td>
                    <td style="width: 350px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 250px;">2. Queue, Suzie</td>
                    <td style="width: 150px;">$900.00</td>
                    <td style="width: 350px;">Stack, Robert</td>
                </tr>
                <tr>
                    <td style="width: 250px;">3. Bunny, Bugs</td>
                    <td style="width: 150px;">$1500.00</td>
                    <td style="width: 350px;">&nbsp;</td>
                </tr>
            </table>
            <h1>Displaying Collections Data to the Right</h1>
            <p>Here is an example of jXLS's "forEach" tag.  Notice how one "forEach" tag is needed
            per row.</p>
            <table style="width: 900px;">
                <tr>
                    <td class="bold" style="width: 150px;">Employee</td>
                    <td style="width: 150px;">&lt;jx:forEach items="${employees}" var="employee"&gt;</td>
                    <td style="width: 150px;">${employee.lastName}, ${employee.firstName}</td>
                    <td style="width: 150px;">&lt;/jx:forEach&gt;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td style="width: 150px;">&lt;jx:forEach items="${employees}" var="employee"&gt;</td>
                    <td style="width: 150px;">${employee.salary}</td>
                    <td style="width: 150px;">&lt;/jx:forEach&gt;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td class="bold" style="width: 150px;">Manager</td>
                    <td style="width: 150px;">&lt;jx:forEach items="${employees}" var="employee"&gt;</td>
                    <td style="width: 150px;">&lt;jx:if test="${employee.getManager() != null}"&gt;</td>
                    <td style="width: 150px;">${employee.manager.lastName}, ${employee.manager.firstName}</td>
                    <td style="width: 150px;">&lt;/jx:if&gt;</td>
                    <td style="width: 150px;">&lt;/jx:forEach&gt;</td>
                </tr>
            </table>
            <p>Here is the equivalent template in JETT, using only one "forEach" tag.  Notice the
            use of the "copyRight" attribute to determine directionality.</p>
            <table style="width: 900px;">
                <tr>
                    <td class="bold" style="width: 150px;">Employee</td>
                    <td style="width: 150px;">&lt;jt:forEach items="${employees}" var="employee" copyRight="true"&gt;${employee.lastName}, ${employee.firstName}</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td style="width: 150px;">${employee.salary}</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td class="bold" style="width: 150px;">Manager</td>
                    <td style="width: 150px;">&lt;jt:if test="${employee.getManager() != null}"&gt;${employee.manager.lastName}, ${employee.manager.firstName}&lt;/jt:if&gt;&lt;/jt:forEach&gt;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
            </table>
            <p>Both templates would, in their respective frameworks, yield the following
            transformation.</p>
            <table style="width: 900px;">
                <tr>
                    <td class="bold" style="width: 150px;">Employee</td>
                    <td style="width: 150px;">Stack, Robert</td>
                    <td style="width: 150px;">Queue, Suzie</td>
                    <td style="width: 150px;">Fudd, Elmer</td>
                    <td style="width: 150px;">Bunny, Bugs</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td style="width: 150px;">$1,000.00</td>
                    <td style="width: 150px;">$900.00</td>
                    <td style="width: 150px;">$800.00</td>
                    <td style="width: 150px;">$1,500.00</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td class="bold" style="width: 150px;">Manager</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Stack, Robert</td>
                    <td style="width: 150px;">Bunny, Bugs</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
            </table>
            <h1>Implicit Collections Processing</h1>
            <p>Here is an example of jXLS's implicit collections processing.  Notice the use of
            "//collName" and "//:2" on different cells to control the processing.</p>
            <table style="width: 900px;">
                <tr>
                    <td style="width: 150px;">Company: ${companyName}</td>
                    <td style="width: 150px;">Name://employees</td>
                    <td style="width: 150px;">${employees.lastName}, ${employees.firstName}//:2</td>
                    <td style="width: 150px;">Department Name://departments</td>
                    <td style="width: 150px;">${departments.name}//:2</td>
                    <td style="width: 150px;">ID: ${departments.id}</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Salary: ${employees.salary}</td>
                    <td style="width: 150px;">Bonus: ${employees.bonus}</td>
                    <td style="width: 150px;">Number of Employees://departments</td>
                    <td style="width: 150px;">${departments.numEmployees}</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
            </table>
            <p>Here is an example of JETT's implicit collections processing.  Notice the use of
            metadata keys "extraRows", "left", and "right", all on one cell, to control the processing.</p>
            <table style="width: 900px;">
                <tr>
                    <td style="width: 150px;">Company: ${companyName}</td>
                    <td style="width: 150px;">Name:</td>
                    <td style="width: 150px;">${employees.lastName}, ${employees.firstName}?@extraRows=1;left=1;right=3</td>
                    <td style="width: 150px;">Department Name:</td>
                    <td style="width: 150px;">${departments.name}</td>
                    <td style="width: 150px;">ID: ${departments.id}</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Salary: ${employees.salary}</td>
                    <td style="width: 150px;">Bonus: ${employees.bonus}</td>
                    <td style="width: 150px;">Number of Employees:</td>
                    <td style="width: 150px;">${departments.numEmployees}</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
            </table>
            <p>Both templates would, in their respective frameworks, yield the following
            transformation.  Notice how the company name is not copied with the rest of the
            collections.</p>
            <table style="width: 900px;">
                <tr>
                    <td style="width: 150px;">Company: Whatsit</td>
                    <td style="width: 150px;">Name:</td>
                    <td style="width: 150px;">Stack, Robert</td>
                    <td style="width: 150px;">Department Name:</td>
                    <td style="width: 150px;">Application Development</td>
                    <td style="width: 150px;">ID: 101</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Salary: 1000</td>
                    <td style="width: 150px;">Bonus: 200</td>
                    <td style="width: 150px;">Number of Employees:</td>
                    <td style="width: 150px;">3</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Name:</td>
                    <td style="width: 150px;">Queue, Suzie</td>
                    <td style="width: 150px;">Department Name:</td>
                    <td style="width: 150px;">Human Resources</td>
                    <td style="width: 150px;">ID: 102</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Salary: 900</td>
                    <td style="width: 150px;">Bonus: 300</td>
                    <td style="width: 150px;">Number of Employees:</td>
                    <td style="width: 150px;">2</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Name:</td>
                    <td style="width: 150px;">Fudd, Elmer</td>
                    <td style="width: 150px;">Department Name:</td>
                    <td style="width: 150px;">Quality Assurance</td>
                    <td style="width: 150px;">ID: 103</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Salary: 800</td>
                    <td style="width: 150px;">Bonus: 400</td>
                    <td style="width: 150px;">Number of Employees:</td>
                    <td style="width: 150px;">2</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Name:</td>
                    <td style="width: 150px;">Bunny, Bugs</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">Salary: 1500</td>
                    <td style="width: 150px;">Bonus: 500</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                    <td style="width: 150px;">&nbsp;</td>
                </tr>
            </table>
            <h1>JDBC Query Execution in the Template</h1>
            <p>Here is an example of the usage of the <code>ReportManager</code> in jXLS:</p>
<source>
    Connection conn = getConnection();
    Map&lt;String, Object&gt; beans = new HashMap&lt;String, Object&gt;();
    ReportManager rm = new ReportManagerImpl(conn, beans);
    beans.put("rm", rm);
    Workbook workbook = transformer.transformXLS(inputStream, beans);
</source>
            <table>
                <tr>
                    <td>&lt;jx:forEach items="${rm.exec('SELECT first_name, last_name, salary, title FROM employee')}" var="employee"></td>
                </tr>
            </table>
            <p>JETT's <code>JDBCExecutor</code> is very similar:</p>
<source>
    Connection conn = getConnection();
    Map&lt;String, Object&gt; beans = new HashMap&lt;String, Object&gt;();
    JDBCExecutor jdbc = new JDBCExecutor(conn);
    beans.put("jdbc", jdbc);
    Workbook workbook = transformer.transform(inputStream, beans);
</source>
            <table>
                <tr>
                    <td>&lt;jt:forEach items="${jdbc.execQuery('SELECT first_name, last_name, salary, title FROM employee')}" var="employee"></td>
                </tr>
            </table>
            <p>However, a <code>JDBCExecutor</code> also has the ability to run JDBC select
                statements that contain <code>?</code> placeholders.  There must be one additional
                argument passed to the <code>execQuery</code> method for each <code>?</code>.</p>
            <table>
                <tr>
                    <td>&lt;jt:forEach items="${jdbc.execQuery('SELECT first_name, last_name, salary, title FROM employee WHERE title = ?', myTitle)}" var="employee"></td>
                </tr>
            </table>
        </section>
    </body>
</document>