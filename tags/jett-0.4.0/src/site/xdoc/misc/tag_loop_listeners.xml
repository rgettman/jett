<document>
    <properties>
        <author email="rgettman@users.sourceforge.net">Randy Gettman</author>
        <title>Tag Loop Listeners</title>
    </properties>
    <body>
        <section name="Tag Loop Listeners">
            <p>For finer control over the content and formatting of the resultant spreadsheet
            cells, JETT allows the user to create <code>TagLoopListener</code> objects that are
            notified every time a looping tag's block for a loop iteration has been processed.
            Looping tags that are not processed do not notify their TagLoopListener object.  This
            may occur, for example, if a looping tag processes an empty collection and its block
            is removed.  Any object that implements the <code>TagLoopListener</code> interface may
            be supplied in the <code>onLoopProcessed</code> attribute of any <code>Tag</code> that
            subclasses <code>BaseLoopTag</code>, as 3 JETT built-in tags do.  The
            <code>TagLoopListener</code> interface contains a single method:</p>
            <source>
public void onTagLoopProcessed(TagLoopEvent event);
            </source>
            <p>Specify a TagLoopListener object or a fully-qualified TagLoopListener class name
            with a looping tag.  If a fully-qualified class name is supplied, then that class must
            have a public, no-argument constructor.</p>
            <source>
&lt;jt:forEach items="${employees}" var="${employee}" onLoopProcessed="${myTagLoopListener}"/&gt;
            </source>
            <p>OR</p>
            <source>
&lt;jt:forEach items="${employees}" var="${employee}" onLoopProcessed="com.mycompany.myproject.CustomTagLoopListener"/&gt;
            </source>
            <p>When a looping tag is processed, and it has a TagLoopListener, then it creates a
            <code>TagLoopEvent</code> and notifies its TagLoopListener.  A TagLoopListener can
            retrieve context information by retrieving properties of the TagLoopEvent.  A
            <code>TagLoopEvent</code> is a <code>TagEvent</code>, so it inherits all of
            <code>TagEvent's</code> properties.</p>
            <source>
Sheet sheet = event.getSheet();
Map&lt;String, Object&gt; beans = event.getBeans();
Block block = event.getBlock();
int left = block.getLeftColNum();
int right = block.getRightColNum();
int top = block.getTopRowNum();
int bottom = block.getBottomRowNum();
int index = event.getLoopIndex();
            </source>
            <p>The <code>Sheet</code> is a reference to the POI Sheet object representing the
            actual sheet in the spreadsheet.  The <code>Map</code> object is a reference to the
            beans map.  It may have extra beans added, if the Tag is a "forEach" tag, or for that
            matter, any tag that adds values to the beans map.  The <code>Block</code> is an object
            that represents the block of Cells affected by this tag.  It has properties for the
            left and right column numbers (0-based), and the top and bottom row numbers (0-based).
            The Sheet object can be used to get POI Row objects, and POI Row objects can be used to
            get POI Cell objects, which can then be manipulated.  It can also be used to obtain the
            POI Workbook object.  The loop index is a 0-based "looping variable" that indicates on
            which iteration the tag is.</p>
        </section>
        <section name="Example">
            <p>A TagLoopListener can be created to affect the formatting of data within a blocks of
            cells in a looping tag.</p>
            <p>This TagLoopListener will shade alternating rows light gray.  It uses POI objects
            and functionality to change the color of the alternating rows.  It uses the looping
            index to determine whether it should color that particular iteration's block's cells
            light gray.</p>
            <source>
public void onTagLoopProcessed(TagLoopEvent event)
{
   Sheet sheet = event.getSheet();
   Workbook workbook = sheet.getWorkbook();
   Block block = event.getBlock();
   int left = block.getLeftColNum();
   int right = block.getRightColNum();
   int top = block.getTopRowNum();
   int bottom = block.getBottomRowNum();
   int index = event.getLoopIndex();

   if (index % 2 == 0)
   {
      for (int r = top; r &lt;= bottom; r++)
      {
         Row row = sheet.getRow(r);
         for (int c = left; c &lt;= right; c++)
         {
            Cell cell = row.getCell(c);
            CellStyle style = cell.getCellStyle();
            CellStyle newStyle = workbook.createCellStyle();
            newStyle.cloneStyleFrom(style);
            newStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
            newStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
            cell.setCellStyle(newStyle);
         }
      }
   }
}
            </source>
            <p>This example uses a <a href="../tags/forEach.html">forEach tag</a> to process the
            "employees" collection.</p>
            <table style="width: 750px;">
                <tr>
                    <td class="bold" style="width: 250px;">Employee</td>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td class="bold" style="width: 350px;">Manager</td>
                </tr>
                <tr>
                    <td style="width: 250px;">&lt;jt:forEach items="${employees}" var="employee" onLoopProcessed="${myTagLoopListener}"&gt;${employee.lastName}, ${employee.firstName}</td>
                    <td style="width: 150px;">${employee.salary}</td>
                    <td style="width: 350px;">&lt;jt:if test="${employee.getManager() != null}" then="${employee.manager.lastName}, ${employee.manager.firstName}"/&gt;&lt;/jt:forEach&gt;</td>
                </tr>
            </table>
            <p>...gets transformed into...</p>
            <table style="width: 750px;">
                <tr>
                    <td class="bold" style="width: 250px;">Employee</td>
                    <td class="bold" style="width: 150px;">Salary</td>
                    <td class="bold" style="width: 350px;">Manager</td>
                </tr>
                <tr>
                    <td class="lightGray" style="width: 250px;">Stack, Robert</td>
                    <td class="lightGray" style="width: 150px;">$1000.00</td>
                    <td class="lightGray" style="width: 350px;">&nbsp;</td>
                </tr>
                <tr>
                    <td style="width: 250px;">Queue, Suzie</td>
                    <td style="width: 150px;">$900.00</td>
                    <td style="width: 350px;">Stack, Robert</td>
                </tr>
                <tr>
                    <td class="lightGray" style="width: 250px;">Fudd, Elmer</td>
                    <td class="lightGray" style="width: 150px;">$800.00</td>
                    <td class="lightGray" style="width: 350px;">Stack, Robert</td>
                </tr>
                <tr>
                    <td style="width: 250px;">Bunny, Bugs</td>
                    <td style="width: 150px;">$1500.00</td>
                    <td style="width: 350px;">&nbsp;</td>
                </tr>
            </table>
        </section>
    </body>
</document>